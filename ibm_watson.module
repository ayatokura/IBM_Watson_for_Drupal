<?php

/**
 * @file
 * IBM Watson.
 */

use GuzzleHttp\Client;

/**
 * Implements hook_theme().
 */
function ibm_watson_theme($existing, $type, $theme, $path) {
  return [
    'ibm_watson_video' => [
      'variables' => [
        'target_id' => NULL,
        'url' => NULL,
        'mimetype' => NULL,
        'translate_text' => NULL,
        'settings' => [],
      ],
    ],
    'ibm_watson_audio' => [
      'variables' => [
        'target_id' => NULL,
        'url' => NULL,
        'mimetype' => NULL,
        'translate_text' => NULL,
        'settings' => [],
      ],
    ],
  ];
}

/**
 * Prepares variables for the IBM watson template.
 *
 * Default template: ibm-watson-audio.html.twig.
 */
function template_preprocess_ibm_watson_audio(&$variables) {
  $variables['attributes']['class'][] = 'watson-container--responsive';
  $extravalue = '';
  if ($variables['settings']['ibm_watson_loop'] == TRUE) {
    $extravalue .= ' loop';
  }
  if ($variables['settings']['ibm_watson_autoplay'] == TRUE) {
    $extravalue .= ' autoplay';
  }
  $variables['extravalue'] = $extravalue;

}

function ibm_watson_get_token($again = null) {
  $config = \Drupal::service('config.factory')->getEditable('ibm_watson.settings');

  $access_token = $config->get('ibm_watson_access_token');
  $refresh_token = $config->get('ibm_watson_refresh_token');
  $expire = $config->get('ibm_watson_access_token_expire');

  if($expire && $expire > time() && $access_token) {
    return $access_token;
  }
  $apikey = $config->get('ibm_watson_apikey');

  $client = new Client([
    'base_uri' => 'https://stream.watsonplatform.net/speech-to-text/api',
    'timeout' => 10.0,
  ]);

  if(isset($access_token) && !isset($refresh_token) && !$again) {
    $headers = [
      'Authorization' => 'Basic Yng6Yng=',
    ];
    $forms = [
      'grant_type' => 'refresh_token',
      'refresh_token' => $refresh_token
    ];
  }else {
    $headers = [
      'Content-Type' => 'application/x-www-form-urlencoded',
      'Accept' => 'application/json',
    ];
    $forms = [
      'grant_type' => 'urn:ibm:params:oauth:grant-type:apikey',
      'apikey' => $apikey
    ];
  }

  $res = $client->request('POST', 'https://iam.bluemix.net/identity/token', [
    'headers' => $headers,
    'form_params' => $forms,
    "http_errors" => $again ? true : false,
  ]);

  switch ($res->getStatusCode()) {
    case '200':
      $body = $res->getBody();
      $token = json_decode($body, TRUE);

      $config->set('ibm_watson_access_token', $token['access_token'])
        ->set('ibm_watson_refresh_token', $token['refresh_token'])
        ->set('ibm_watson_access_token_expire', $token['expiration'])
        ->save();

      return $token['access_token'];
      break;

    case '401':
      if($again) return false;

      ibm_watson_get_token(true);
    default:
      //throw new Exception('Request Error. StatusCode: ' . $res->getStatusCode());
      throw new Exception(var_export($forms));
      break;
  }

  return false;
}

/**
 * Get session when we are not use sessionless.
 */
function ibm_watson_sessions() {

  $output = [];
  $client = new Client([

    // Base URI is used with relative requests.
    'base_uri' => 'https://stream.watsonplatform.net/speech-to-text/api',

    // You can set any number of default request options.
    'timeout' => 2.0,
  ]);
  $config = \Drupal::service('config.factory')->getEditable('ibm_watson.settings');
  $token = ibm_watson_get_token();

  $res = $client->request('POST', 'https://stream.watsonplatform.net/speech-to-text/api/v1/sessions', [
    'header' => [
      'Authorization' => 'Bearer ' . $token
    ],
  ]);
  switch ($res->getStatusCode()) {
    case '201':
      $body = $res->getBody();
      $output = json_decode($body, TRUE);
      break;

    case '406':
    case '415':
    case '503':
      break;

  }
  return $output;
}

/**
 * Sessionless: Recognize audio.
 */
function ibm_watson_sessionless_recognize($real_path, $mimetype, $model) {
  $config = \Drupal::service('config.factory')->getEditable('ibm_watson.settings');
  $token = ibm_watson_get_token();

  if (empty($model)) {
    $model = 'en-US_BroadbandModel';
  }

  $client = new Client([
    'base_uri' => 'https://stream.watsonplatform.net/speech-to-text/api',
    'timeout' => 200.0,
  ]);
  $headers = [
    'Content-Type' => $mimetype,
    'Authorization' => 'Bearer ' . $token,
  ];
  $real_path = str_replace("\\", "\\\\", $real_path);
  $file = fopen($real_path, 'r');

  $url = 'https://stream.watsonplatform.net/speech-to-text/api/v1/recognize?continuous=true&timestamps=true&model=' . $model;

  $res = $client->request('POST', $url, [
    'headers' => $headers,
    'body' => $file,
  ]);
  $body = $res->getBody();
  return $body;
}

/**
 * Get session recognize by curl instead of guzzle.
 */
function ibm_watson_session_recognize_curl($path, $url, $real_path, $mimetype) {
  $file = fopen($url, 'r');
  $size = filesize($real_path);
  $fildata = fread($file, $size);
  $token = ibm_watson_get_token();
  $headers = [
    "Content-Type" => $mimetype,
    "Authorization" => "Bearer " . $token,
    "Transfer-Encoding" => "chunked",
  ];

  $ch = curl_init();
  curl_setopt($ch, CURLOPT_URL, $path);
  curl_setopt($ch, CURLOPT_POST, TRUE);
  curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);
  curl_setopt($ch, CURLOPT_BINARYTRANSFER, TRUE);
  curl_setopt($ch, CURLOPT_POSTFIELDS, $fildata);
  curl_setopt($ch, CURLOPT_INFILE, $file);
  curl_setopt($ch, CURLOPT_INFILESIZE, $size);
  curl_setopt($ch, CURLOPT_VERBOSE, TRUE);
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE);
  curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, TRUE);
  $executed = curl_exec($ch);
  curl_close($ch);
  return $executed;
}

/**
 * This function is okay but we not use for now.
 */
function ibm_watson_recognize_curl($url, $real_path, $mimetype) {

  $path = 'https://stream.watsonplatform.net/speech-to-text/api/v1/recognize?continuous=true';
  $file = fopen($url, 'r');
  $size = filesize($real_path);
  $fildata = fread($file, $size);
  $token = ibm_watson_get_token();
  $headers = [
    "Content-Type" => $mimetype,
    'Authorization' => 'Bearer ' . $token,
    "Transfer-Encoding" => " chunked",
  ];

  $ch = curl_init();
  curl_setopt($ch, CURLOPT_URL, $path);
  curl_setopt($ch, CURLOPT_POST, TRUE);
  curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);
  curl_setopt($ch, CURLOPT_BINARYTRANSFER, TRUE);

  curl_setopt($ch, CURLOPT_POSTFIELDS, $fildata);
  curl_setopt($ch, CURLOPT_VERBOSE, TRUE);
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE);
  curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, TRUE);
  $executed = curl_exec($ch);

  curl_close($ch);
  return $executed;
}

/**
 * Get Mime type.
 */
function ibm_watson_mime_type($mimetype) {
  if ($mimetype == 'audio/mpeg') {
    $output = 'audio/mpeg';
  }
  elseif ($mimetype == 'audio/x-wav') {
    $output = 'audio/wav';
  }
  elseif ($mimetype == 'audio/ogg') {
    $output = 'audio/ogg';
  }
  elseif ($mimetype == 'application/x-flac') {
    $output = 'audio/flac';
  }
  return $output;
}

/**
 * Get model in the Watson.
 */
function ibm_watson_model() {

  $output = [
    'ar-AR_BroadbandModel' => 'ar-AR_BroadbandModel',
    'en-UK_BroadbandModel' => 'en-UK_BroadbandModel',
    'en-UK_NarrowbandModel' => 'en-UK_NarrowbandModel',
    'en-US_BroadbandModel' => 'en-US_BroadbandModel  (default)',
    'en-US_NarrowbandModel' => 'en-US_NarrowbandModel',
    'es-ES_BroadbandModel' => 'es-ES_BroadbandModel',
    'es-ES_NarrowbandModel' => 'es-ES_NarrowbandModel',
    'fr-FR_BroadbandModel' => 'fr-FR_BroadbandModel',
    'ja-JP_BroadbandModel' => 'ja-JP_BroadbandModel',
    'ja-JP_NarrowbandModel' => 'ja-JP_NarrowbandModel',
    'pt-BR_BroadbandModel' => 'pt-BR_BroadbandModel',
    'pt-BR_NarrowbandModel' => 'pt-BR_NarrowbandModel',
    'zh-CN_BroadbandModel' => 'zh-CN_BroadbandModel',
    'zh-CN_NarrowbandModel' => 'zh-CN_NarrowbandModel',
  ];
  return $output;
}
